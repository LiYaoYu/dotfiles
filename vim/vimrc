set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()


" plugins manager
Plugin 'gmarik/vundle'

" files exploring
Plugin 'scrooloose/nerdtree'

" code tracing
Plugin 'LiYaoYu/SrcExpl'

" code autocompletion
Plugin 'Valloric/YouCompleteMe'

" files/codes fuzzy exploring
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plugin 'junegunn/fzf.vim'


" detect the language and turn on the color
syntax on

" change the comfirmation color
set bg=dark

" line number
set nu

" enable line number with colors
hi LineNr cterm=bold ctermfg=DarkGrey
hi CursorLineNr cterm=bold ctermfg=Green

" set 100 characters reminder
let &colorcolumn=join(range(101,999),",")
hi ColorColumn ctermbg=234 guibg=#002B36

" highlight current cursor line
set cursorline
hi CursorLine cterm=none ctermbg=235
" show tab indent and trail space with colors
set list lcs=tab:\|\ ,trail:Â·
hi SpecialKey ctermfg=239 guifg=#654321

" set encoding
set encoding=utf-8

" remain indent
set ai

" need confirmation before exit
set confirm

" do not change lines
set nowrap

" jump to current searching string with case insensitive and immediately
set ic
set incsearch

" enable mouse in vim
set mouse=a
set ttymouse=xterm2

" settings for tabs
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

" tab settings for Makefile
autocmd FileType make setlocal noexpandtab shiftwidth=8 tabstop=8

" settings for status line
set statusline=
set statusline+=%2*\ %<%F\                                " File+path
set statusline+=%3*\ %=\ %{''.(&fenc!=''?&fenc:&enc).''}\ " Encoding
set statusline+=%6*\ %5l,%3c\                             " RowColnumber
set statusline+=%0*\ \ %m%r%w\ %P\ \                      " File Status Top/Bot
hi User2 ctermfg=15  ctermbg=237
hi User3 ctermfg=15  ctermbg=237
hi User6 ctermfg=0  ctermbg=32
set laststatus=2


" brackets complement
imap {<CR> {<CR>}<Esc>ko<Tab>

" jump between Rg and pre Rg locations
nmap b 'X
nmap B 'Y

" show current function name
nmap f :call ShowFuncName()<CR>

" resize windows
nmap , <C-W><
nmap . <C-W>>

" shortcuts for navigation between splited windows
nmap <C-J> <C-W><C-J>
nmap <C-K> <C-W><C-K>
nmap <C-L> <C-W><C-L>
nmap <C-H> <C-W><C-H>

" vertical split current file
nmap <F2> :vsplit %:p<CR>

" search and replace words
nmap <F3> "zyiw:exe " Ag ".@z.""<CR>
nmap <F4> :cdo %s///gc <Left><Left><Left><Left><Left>

" plugin shortcut commands
nmap <F5> <Esc>:call RgExtension()<CR>
nmap <F6> :Files<CR>
nmap <F7> :NERDTree<CR>
nmap <F8> :SrcExpl<CR><CR>

" roll the tab
nmap <F9> gT
nmap <F10> gt

" cscope settings
set cscopetag
set csto=0
if filereadable("cscope.out")
  cs add cscope.out
endif

" show msg when any other cscope db added
set cscopeverbose

"   's'   symbol: find all references to the token under cursor
"   'g'   global: find global definition(s) of the token under cursor
"   'c'   calls:  find all calls to the function name under cursor
"   't'   text:   find all instances of the text under cursor
"   'e'   egrep:  egrep search for the word under cursor
"   'f'   file:   open the filename under cursor
"   'i'   includes: find files that include the filename under cursor
"   'd'   called: find functions that function under cursor calls

" jump to target directly
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

" jump to target with a new vertical split window
nmap <C-\><C-\>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\><C-\>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\><C-\>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

" update cscope automatically
nmap <silent> <C-\>u :call AutoUpdateCscopeAndCtags()<CR>

" load specific plugins based on filetype
filetype plugin on

" settings for fzf
let g:fzf_layout = { 'down': '~20%' }
let g:fzf_action = { 'ctrl-v': 'vsplit' }

" settings for YouCompleteMe
let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:ycm_python_binary_path = '/usr/bin/python3'
let g:ycm_extra_conf_vim_data = ['&filetype']
let g:ycm_filepath_completion_use_working_dir = 1
let g:ycm_show_diagnostics_ui = 0
let g:ycm_autoclose_preview_window_after_completion = 1

" function definitions for calls above
fun! RgExtension()
  let target = input(":Rg ")

  exec "normal mX"
  exec "Rg ". target
  exec "normal mY"
endfun

fun! ShowFuncName()
  let lnum = line(".")
  let col = col(".")
  echohl ModeMsg
  echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
  echohl None
  call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfun

fun! AutoUpdateCscopeAndCtags()
  let UpdateCscopeDB = 'cscope -Rb'
  let UpdateCtagsDB = 'ctags -R'
  let Res = system(UpdateCscopeDB)
  let Res = system(UpdateCtagsDB)
  unlet UpdateCscopeDB
  unlet UpdateCtagsDB
  unlet Res
  silent exec "cs kill -1"
  silent exec "cs add cscope.out"
endfun
